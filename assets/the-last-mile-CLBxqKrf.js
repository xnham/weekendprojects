import{t as a,a as o}from"./index-B1d9r4M_.js";const s={title:"The Last Mile",description:"How AI is like DoorDash.",date:"2025-03-31",published:!0,excerpt:"Plenty of problems are technically solved yet practically stuck, not because the machinery falters, but because no single interface can carry it across the messy terrain of human behavior."},{title:r,description:l,date:h,published:d,excerpt:c}=s;var n=a("<p>In logistics, the ‘last mile’ is the final leg of a delivery, the short stretch between a distribution hub and your doorstep. It’s often the most expensive and frustrating part of the journey because it’s messy. It involves traffic, unclear addresses, bad weather, the quirks of human schedules, and sometimes, scary dogs.</p> <p>Technology has its own last mile. A system can be powerful, accurate, even elegant under the hood, but if the interface doesn’t quite match the way people actually behave, adoption stalls. It gets stuck at the human edge.</p> <p>Take large language models: They’ve been quietly improving for years, but it wasn’t until OpenAI released ChatGPT—a plain text box, no setup, no instruction manual—that people really started using them. Suddenly, these enormous models weren’t locked behind APIs or academic papers. They were just <em>there</em>, ready to answer a question. The underlying technology hadn’t changed all that much. But the interface had. And that made all the difference.</p> <p>I started thinking about technology’s last mile during my time with Ocams, the tennis video company I co-founded. In our early days, we assumed we’d need to build a dashboard for club managers. It was the default move: every tech product needs an interface, right?</p> <p>But once we started working with real clubs, that idea began to unravel. One club wanted to automatically send match videos to members while excluding guests. Another ran everything on-demand and offered video subscriptions to its members. A third focused heavily on juniors, where the head coach wanted specific edits from specific practices delivered weekly. Even clubs using the same booking software had wildly different workflows. One prioritized private lessons. Another juggled sprawling group clinics across several courts.</p> <p>And that’s before we even get to the players. Some consistently showed up ten minutes early, others were always twenty minutes late. Some drilled with precision, others just hit around. Even among competitive players, everyone had a favorite scoring format variation. Half the time, someone forgot the score mid-game.</p> <p>Trying to design a single interface that could gracefully handle all that variation started to feel absurd. So instead of building a rigid dashboard and forcing everyone to adapt to it, we started asking: what if we adapted to <em>them</em>?</p> <p>We took stock of the tools they already used: Google Sheets, email, booking platforms, text messages. Then we built around them. When we needed input, we simply asked for it through those same familiar tools. Underneath, our system handled the complexity. On the surface, it felt like nothing new. It just worked.</p> <p>This approach didn’t just lower friction. It acknowledged a truth that’s easy to forget in software: most people don’t want to learn another tool. They want to do their job, not master someone else’s interface logic.</p> <p>The more I thought about it, the more I started noticing the broader pattern. We’re surrounded by problems that are technically solvable but practically stuck. Not because the technology doesn’t work well or is too complex, but because the last mile is difficult to bridge with a one-size-fits-all interface.</p> <p>Live streaming at tennis clubs is a great example. The ‘want’ is there, and the cameras and software are readily available. But the final stretch—the actual implementation—is where things stall. Many clubs never get around to setting up live streaming. Not because it’s especially hard, but because no one on staff feels quite confident enough to piece it all together. It’s the technological equivalent of a package that can’t quite make it from the distribution hub to your doorstep.</p> <p>This is where AI changes the game. It can shift the <em>economics</em> and <em>ergonomics</em> of interfaces, making it possible to bridge technology’s last mile more effectively.</p> <p><strong>First</strong>, AI allows developers to build simpler interfaces because it doesn’t require precise, structured input. Instead of navigating through layers of buttons and toggles, users can just ask. Natural language becomes the interface. A text box, a voice prompt, a chat window—these let people express intent in their own words, without needing to learn a new syntax or menu tree. AI can even be designed to ask the user for the information it needs. That makes AI, not the user, the prompt engineer.</p> <p><strong>Second</strong>, AI dramatically lowers the cost of creating custom interfaces. In the past, tailoring a system to someone’s specific workflow might cost tens of thousands in development. Now, with AI-assisted coding and configuration, bespoke solutions are within reach even for small teams or individual users.</p> <p><strong>Third</strong>, AI can live inside interfaces, quietly learning how people use them. Over time, the system adapts. It surfaces what’s relevant, hides what’s not, and anticipates next steps. Interfaces that once felt generic start to feel personal. They learn our rhythm and get out of our way.</p> <p>Beyond these new capabilities, the fundamentals of good design haven’t changed: thoughtful restraint, clear purpose, and a focus on the user’s needs. Sometimes developers need to create a new interface. Sometimes the best move is no interface at all, just invisible automation. And sometimes the answer is to repurpose the tools people already know, layering intelligence on top of familiarity.</p> <p>I’m hopeful that the next generation of tools will skillfully navigate the messy human edge of technology’s last mile. Much like how modern logistics companies have transformed package delivery with real-time tracking and flexible delivery options. Rather than forcing users to demystify common-denominator interfaces through YouTube tutorials and sheer willpower, developers can now build systems to meet people where they are, empowering everyone to implement solutions without reservation.</p>",1);function u(e){var t=n();o(e,t)}export{u as default,s as metadata};
