import{s}from"./supabase.8f09c013.js";import{w as b}from"./index.922d57c4.js";import{R as y}from"./scheduler.0abf8665.js";const w={ESSAY:"essay"},u=b({likes:{},shares:{},views:{}}),x="device_id";function k(){try{if(typeof crypto<"u"&&typeof crypto.randomUUID=="function")return crypto.randomUUID();const e=typeof crypto<"u"&&typeof crypto.getRandomValues=="function";return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){let o;if(e){const r=new Uint8Array(1);crypto.getRandomValues(r),o=r[0]%16}else o=Math.random()*16|0;return(t==="x"?o:o&3|8).toString(16)})}catch(e){console.error("Error generating UUID:",e);const t=new Date().getTime(),o=Math.floor(Math.random()*1e7);return`fallback-${t}-${o}`}}function D(){try{const e="__test__";localStorage.setItem(e,e);const t=localStorage.getItem(e)===e;return localStorage.removeItem(e),t}catch{return!1}}async function m(){try{if(!D())return console.warn("localStorage is not available, using temporary device ID"),"temp-"+k();let e=localStorage.getItem(x);return e?console.log("Retrieved existing device ID:",e):(e=k(),localStorage.setItem(x,e),console.log("Created new device ID:",e)),e}catch(e){return console.error("Error in getOrCreateDeviceId:",e),"temp-"+Math.random().toString(36).substring(2,15)}}async function P(){if(console.log("Initializing interaction service"),console.log("Supabase client available:",!!s),!s)return console.error("Supabase client is not initialized"),null;try{try{const{data:t,error:o}=await s.from("essays").select("id").limit(1);o?console.error("Supabase connection test failed:",o):console.log("Supabase connection test successful:",t)}catch(t){console.error("Error testing Supabase connection:",t)}const e=await m();console.log("Device ID created/retrieved:",e),console.log("Current interaction state before refresh:",y(u));try{await v(e),console.log("Successfully refreshed interaction state")}catch(t){console.error("Error refreshing interaction state:",t)}return console.log("Interaction state after refresh:",y(u)),console.log("Interaction service initialized with device ID:",e),e}catch(e){return console.error("Failed to initialize interaction service:",e),null}}async function v(e){try{const{data:t,error:o}=await s.from("essay_interactions").select("essay_id, has_liked, share_count, has_viewed").eq("device_id",e);if(o)throw o;const a={likes:{},shares:{},views:{}};t&&t.forEach(r=>{const i=`${w.ESSAY}:${r.essay_id}`;a.likes[i]=r.has_liked||!1,a.shares[i]=r.share_count||0,a.views[i]=r.has_viewed||!1}),u.set(a)}catch(t){console.error("Failed to refresh interaction state:",t)}}function U(e){return u.subscribe(e)}function M(e){if(!e)return console.error("isLiked called without an essayId"),!1;const t=y(u),o=`${w.ESSAY}:${e}`,a=!!t.likes[o];return console.log(`Checking if essay ${e} is liked: ${a}`),a}const g=new Map;async function A(e){if(g.has(e))return console.log(`Ignoring duplicate like request for essay ${e}`),g.get(e)||Promise.resolve(!1);const t=await m(),o=`${w.ESSAY}:${e}`,r=!!y(u).likes[o],i=(async()=>{u.update(n=>({...n,likes:{...n.likes,[o]:!r}}));try{const{data:n,error:c}=await s.from("essay_interactions").select("id, has_liked").eq("device_id",t).eq("essay_id",e).single();if(c&&c.code!=="PGRST116")throw c;const l=!r;if(n){const{error:f}=await s.from("essay_interactions").update({has_liked:l,updated_at:new Date().toISOString()}).eq("id",n.id);if(f)throw f}else{const{error:f}=await s.from("essay_interactions").insert({device_id:t,essay_id:e,has_liked:l,share_count:0,has_viewed:!0});if(f)throw f}const h=l?1:-1,{error:d}=await s.rpc("increment_essay_like_count",{essay_id:e,increment_by:h});if(d){console.warn("RPC failed, using fallback method for updating like count:",d);const{data:f,error:S}=await s.from("essays").select("like_count").eq("id",e).single();if(S)throw S;const q=Math.max(0,(f.like_count||0)+h),{error:E}=await s.from("essays").update({like_count:q}).eq("id",e);if(E)throw E}return await v(t),l}catch(n){return console.error("Error toggling like:",n),u.update(c=>({...c,likes:{...c.likes,[o]:r}})),r}finally{g.delete(e)}})();return g.set(e,i),i}const _=new Map;async function T(e){if(_.has(e))return console.log(`Ignoring duplicate share request for essay ${e}`),_.get(e)||Promise.resolve(!1);const t=await m(),o=`${w.ESSAY}:${e}`,a=(async()=>{u.update(r=>{const i=r.shares[o]||0;return{...r,shares:{...r.shares,[o]:i+1}}});try{const{data:r,error:i}=await s.from("essay_interactions").select("id, share_count").eq("device_id",t).eq("essay_id",e).single();if(i&&i.code!=="PGRST116")throw i;if(r){const c=(r.share_count||0)+1,{error:l}=await s.from("essay_interactions").update({share_count:c,updated_at:new Date().toISOString()}).eq("id",r.id);if(l)throw l}else{const{error:c}=await s.from("essay_interactions").insert({device_id:t,essay_id:e,has_liked:!1,share_count:1,has_viewed:!0});if(c)throw c}const{error:n}=await s.rpc("increment_essay_share_count",{essay_id:e,increment_by:1});if(n){console.warn("RPC failed, using fallback method for updating share count:",n);const{data:c,error:l}=await s.from("essays").select("share_count").eq("id",e).single();if(l)throw l;const h=(c.share_count||0)+1,{error:d}=await s.from("essays").update({share_count:h}).eq("id",e);if(d)throw d}return await v(t),!0}catch(r){throw console.error("Error recording share:",r),u.update(i=>{const n=i.shares[o]||0;return{...i,shares:{...i.shares,[o]:Math.max(0,n-1)}}}),r}finally{setTimeout(()=>{_.delete(e)},500)}})();return _.set(e,a),a}const p=new Map;async function L(e){if(p.has(e))return console.log(`Ignoring duplicate view request for essay ${e}`),p.get(e)||Promise.resolve(!1);const t=await m(),o=`${w.ESSAY}:${e}`,a=(async()=>{u.update(r=>({...r,views:{...r.views,[o]:!0}}));try{const{data:r,error:i}=await s.from("essay_interactions").select("id, has_viewed").eq("device_id",t).eq("essay_id",e).single();if(i&&i.code!=="PGRST116")throw i;if(r){const{error:n}=await s.from("essay_interactions").update({has_viewed:!0,updated_at:new Date().toISOString()}).eq("id",r.id);if(n)throw n}else{const{error:n}=await s.from("essay_interactions").insert({device_id:t,essay_id:e,has_liked:!1,share_count:0,has_viewed:!0});if(n)throw n}{const{error:n}=await s.rpc("increment_essay_view_count",{essay_id:e,increment_by:1});if(n){console.warn("RPC failed, using fallback method for updating view count:",n);const{data:c,error:l}=await s.from("essays").select("view_count").eq("id",e).single();if(l)throw l;const h=(c.view_count||0)+1,{error:d}=await s.from("essays").update({view_count:h}).eq("id",e);if(d)throw d}}return await v(t),!0}catch(r){return console.error("Error recording view:",r),!1}finally{setTimeout(()=>{p.delete(e)},1e3)}})();return p.set(e,a),a}export{w as C,M as a,L as b,P as i,T as r,U as s,A as t};
